=begin
#configapi

#Config API lets you easily manage configuration at scale.

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module CloudmersiveConfigurationApiClient
  class SettingsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Create a setting in the specified bucket
    # 
    # @param request Request to perform the operation on
    # @param [Hash] opts the optional parameters
    # @return [CreateSettingResponse]
    def settings_create_setting(request, opts = {})
      data, _status_code, _headers = settings_create_setting_with_http_info(request, opts)
      return data
    end

    # Create a setting in the specified bucket
    # 
    # @param request Request to perform the operation on
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateSettingResponse, Fixnum, Hash)>] CreateSettingResponse data, response status code and response headers
    def settings_create_setting_with_http_info(request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SettingsApi.settings_create_setting ..."
      end
      # verify the required parameter 'request' is set
      if @api_client.config.client_side_validation && request.nil?
        fail ArgumentError, "Missing the required parameter 'request' when calling SettingsApi.settings_create_setting"
      end
      # resource path
      local_var_path = "/config/settings/create"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreateSettingResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#settings_create_setting\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Enumerate the settings in a bucket
    # 
    # @param request Request to perform the operation on
    # @param [Hash] opts the optional parameters
    # @return [ListSettingsResponse]
    def settings_list_settings(request, opts = {})
      data, _status_code, _headers = settings_list_settings_with_http_info(request, opts)
      return data
    end

    # Enumerate the settings in a bucket
    # 
    # @param request Request to perform the operation on
    # @param [Hash] opts the optional parameters
    # @return [Array<(ListSettingsResponse, Fixnum, Hash)>] ListSettingsResponse data, response status code and response headers
    def settings_list_settings_with_http_info(request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SettingsApi.settings_list_settings ..."
      end
      # verify the required parameter 'request' is set
      if @api_client.config.client_side_validation && request.nil?
        fail ArgumentError, "Missing the required parameter 'request' when calling SettingsApi.settings_list_settings"
      end
      # resource path
      local_var_path = "/config/settings/list"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ListSettingsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#settings_list_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a setting
    # 
    # @param request Request to perform the operation on
    # @param [Hash] opts the optional parameters
    # @return [UpdateSettingResponse]
    def settings_update_setting(request, opts = {})
      data, _status_code, _headers = settings_update_setting_with_http_info(request, opts)
      return data
    end

    # Update a setting
    # 
    # @param request Request to perform the operation on
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateSettingResponse, Fixnum, Hash)>] UpdateSettingResponse data, response status code and response headers
    def settings_update_setting_with_http_info(request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SettingsApi.settings_update_setting ..."
      end
      # verify the required parameter 'request' is set
      if @api_client.config.client_side_validation && request.nil?
        fail ArgumentError, "Missing the required parameter 'request' when calling SettingsApi.settings_update_setting"
      end
      # resource path
      local_var_path = "/config/settings/update"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UpdateSettingResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#settings_update_setting\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
